import { slug as githubSlug } from "github-slugger";
import matter from "gray-matter";
import path from "node:path";
import { fileURLToPath } from "node:url";
import { createServer, normalizePath } from "vite";
import { z } from "zod";
import { AstroError, AstroErrorData } from "../core/errors/index.js";
import { CONTENT_TYPES_FILE } from "./consts.js";
import { astroContentVirtualModPlugin } from "./vite-plugin-content-virtual-mod.js";
const collectionConfigParser = z.object({
  schema: z.any().optional()
});
function getDotAstroTypeReference({ root, srcDir }) {
  const { cacheDir } = getContentPaths({ root, srcDir });
  const contentTypesRelativeToSrcDir = normalizePath(
    path.relative(fileURLToPath(srcDir), fileURLToPath(new URL(CONTENT_TYPES_FILE, cacheDir)))
  );
  return `/// <reference path=${JSON.stringify(contentTypesRelativeToSrcDir)} />`;
}
const contentConfigParser = z.object({
  collections: z.record(collectionConfigParser)
});
const msg = {
  collectionConfigMissing: (collection) => `${collection} does not have a config. We suggest adding one for type safety!`
};
function getEntrySlug({
  id,
  collection,
  slug,
  data: unparsedData
}) {
  try {
    return z.string().default(slug).parse(unparsedData.slug);
  } catch {
    throw new AstroError({
      ...AstroErrorData.InvalidContentEntrySlugError,
      message: AstroErrorData.InvalidContentEntrySlugError.message(collection, id)
    });
  }
}
async function getEntryData(entry, collectionConfig) {
  let { slug, ...data } = entry.data;
  if (collectionConfig.schema) {
    if (typeof collectionConfig.schema === "object" && !("safeParseAsync" in collectionConfig.schema)) {
      throw new AstroError({
        title: "Invalid content collection config",
        message: `New: Content collection schemas must be Zod objects. Update your collection config to use \`schema: z.object({...})\` instead of \`schema: {...}\`.`,
        hint: "See https://docs.astro.build/en/reference/api-reference/#definecollection for an example.",
        code: 99999
      });
    }
    if (typeof collectionConfig.schema === "object" && "shape" in collectionConfig.schema && collectionConfig.schema.shape.slug) {
      throw new AstroError({
        ...AstroErrorData.ContentSchemaContainsSlugError,
        message: AstroErrorData.ContentSchemaContainsSlugError.message(entry.collection)
      });
    }
    const parsed = await collectionConfig.schema.safeParseAsync(entry.data, { errorMap });
    if (parsed.success) {
      data = parsed.data;
    } else {
      const formattedError = new AstroError({
        ...AstroErrorData.InvalidContentEntryFrontmatterError,
        message: AstroErrorData.InvalidContentEntryFrontmatterError.message(
          entry.collection,
          entry.id,
          parsed.error
        ),
        location: {
          file: entry._internal.filePath,
          line: getFrontmatterErrorLine(
            entry._internal.rawData,
            String(parsed.error.errors[0].path[0])
          ),
          column: 0
        }
      });
      throw formattedError;
    }
  }
  return data;
}
class NoCollectionError extends Error {
}
function getEntryInfo({
  entry,
  contentDir,
  allowFilesOutsideCollection = false
}) {
  const rawRelativePath = path.relative(fileURLToPath(contentDir), fileURLToPath(entry));
  const rawCollection = path.dirname(rawRelativePath).split(path.sep).shift();
  const isOutsideCollection = rawCollection === ".." || rawCollection === ".";
  if (!rawCollection || !allowFilesOutsideCollection && isOutsideCollection)
    return new NoCollectionError();
  const rawId = path.relative(rawCollection, rawRelativePath);
  const rawIdWithoutFileExt = rawId.replace(new RegExp(path.extname(rawId) + "$"), "");
  const rawSlugSegments = rawIdWithoutFileExt.split(path.sep);
  const slug = rawSlugSegments.map((segment) => githubSlug(segment)).join("/").replace(/\/index$/, "");
  const res = {
    id: normalizePath(rawId),
    slug,
    collection: normalizePath(rawCollection)
  };
  return res;
}
const flattenErrorPath = (errorPath) => errorPath.join(".");
const errorMap = (error, ctx) => {
  if (error.code === "invalid_type") {
    const badKeyPath = JSON.stringify(flattenErrorPath(error.path));
    if (error.received === "undefined") {
      return { message: `${badKeyPath} is required.` };
    } else {
      return { message: `${badKeyPath} should be ${error.expected}, not ${error.received}.` };
    }
  }
  return { message: ctx.defaultError };
};
function getFrontmatterErrorLine(rawFrontmatter, frontmatterKey) {
  const indexOfFrontmatterKey = rawFrontmatter.indexOf(`
${frontmatterKey}`);
  if (indexOfFrontmatterKey === -1)
    return 0;
  const frontmatterBeforeKey = rawFrontmatter.substring(0, indexOfFrontmatterKey + 1);
  const numNewlinesBeforeKey = frontmatterBeforeKey.split("\n").length;
  return numNewlinesBeforeKey;
}
function parseFrontmatter(fileContents, filePath) {
  try {
    matter.clearCache();
    return matter(fileContents);
  } catch (e) {
    if (e.name === "YAMLException") {
      const err = e;
      err.id = filePath;
      err.loc = { file: e.id, line: e.mark.line + 1, column: e.mark.column };
      err.message = e.reason;
      throw err;
    } else {
      throw e;
    }
  }
}
async function loadContentConfig({
  fs,
  settings
}) {
  const contentPaths = getContentPaths(settings.config);
  const tempConfigServer = await createServer({
    root: fileURLToPath(settings.config.root),
    server: { middlewareMode: true, hmr: false },
    optimizeDeps: { entries: [] },
    clearScreen: false,
    appType: "custom",
    logLevel: "silent",
    plugins: [astroContentVirtualModPlugin({ settings })]
  });
  let unparsedConfig;
  if (!fs.existsSync(contentPaths.config)) {
    return void 0;
  }
  try {
    const configPathname = fileURLToPath(contentPaths.config);
    unparsedConfig = await tempConfigServer.ssrLoadModule(configPathname);
  } catch (e) {
    throw e;
  } finally {
    await tempConfigServer.close();
  }
  const config = contentConfigParser.safeParse(unparsedConfig);
  if (config.success) {
    return config.data;
  } else {
    return void 0;
  }
}
function contentObservable(initialCtx) {
  const subscribers = /* @__PURE__ */ new Set();
  let ctx = initialCtx;
  function get() {
    return ctx;
  }
  function set(_ctx) {
    ctx = _ctx;
    subscribers.forEach((fn) => fn(ctx));
  }
  function subscribe(fn) {
    subscribers.add(fn);
    return () => {
      subscribers.delete(fn);
    };
  }
  return {
    get,
    set,
    subscribe
  };
}
function getContentPaths({
  srcDir,
  root
}) {
  const templateDir = new URL("../../src/content/template/", import.meta.url);
  return {
    cacheDir: new URL(".astro/", root),
    contentDir: new URL("./content/", srcDir),
    typesTemplate: new URL("types.d.ts", templateDir),
    virtualModTemplate: new URL("virtual-mod.mjs", templateDir),
    config: new URL("./content/config.ts", srcDir)
  };
}
export {
  NoCollectionError,
  collectionConfigParser,
  contentConfigParser,
  contentObservable,
  getContentPaths,
  getDotAstroTypeReference,
  getEntryData,
  getEntryInfo,
  getEntrySlug,
  loadContentConfig,
  msg,
  parseFrontmatter
};
